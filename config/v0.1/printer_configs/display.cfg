## config
[mcu display]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_1E0028001543504331303220-if00
restart_method: command                  # rpi_usb / arduino / command - causes device to hang sometimes

[temperature_sensor display]
sensor_type: temperature_mcu
sensor_mcu: display

[display]
lcd_type: sh1106
i2c_mcu: display
i2c_bus: i2c1a
encoder_pins: ^!display:PA4, ^display:PA3
click_pin: ^!display:PA1
kill_pin: ^!display:PA5
x_offset: 2
vcomh: 17
#   Set the Vcomh value on SSD1306/SH1106 displays. This value is
#   associated with a "smearing" effect on some OLED displays. The
#   value may range from 0 to 63. Default is 0.
#   Adjust this value if you get some vertical stripes on your display. (31 seems to be a good value)

#   RGB Values should be set to match your printer colour scheme
[neopixel displayStatus]
pin: display:PA0
chain_count: 1
color_order: GRB
initial_RED: 0.2
initial_GREEN: 0.1
initial_BLUE: 0

[led_effect display_idle]
autostart: true
frame_rate: 24
leds:
    neopixel:displayStatus (1)
layers:
    breathing      10 1     top (0.6,.3,.0)

## menu overrides
[menu __main __octoprint]
type: disabled

[menu __main __sdcard]
type: disabled

## custom menus
[menu __main __leveling]
type: list
name: Leveling

[menu __main __leveling _screw_tilt]
type: command
name: Screw Tilt Calc
gcode: SCREWS_TILT_CALCULATE

[menu __main __leveling _bed_mesh]
type: command
name: Bed Mesh
gcode: BED_MESH_CALIBRATE

[menu __main __leveling _bed_level]
type: command
name: Bed Level
gcode: BED_LEVEL

[menu __main __leveling _accept]
type: command
name: Accept
gcode: ACCEPT

[menu __main __leveling _adjust]
type: command
name: Adjusted
gcode: ADJUSTED

[menu __main __leveling __abort]
type: command
name: Abort
gcode: ABORT

[menu __main __control __casefans_onoff]
type: input
name: Case Fans: {'ON ' if menu.input else 'OFF'}
enable: {'fan_generic Filter_Fans' in printer}
input: {printer['fan_generic Filter_Fans'].speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_FAN_SPEED FAN=Filter_Fans SPEED={1 if menu.input else 0}

[menu __main __control __casefans_pwm]
type: input
enable: {'fan_generic Filter_Fans' in printer}
name: Case Fans: {'%3d' % (menu.input*100)}%
input: {printer['fan_generic Filter_Fans'].speed}
input_min: 0.15
input_max: 1
input_step: 0.01
gcode:
    SET_FAN_SPEED FAN=Filter_Fans SPEED={menu.input}

[menu __main __control __caseleds_onoff]
type: input
name: Case LEDs: {'ON ' if menu.input else 'OFF'}
enable: {'output_pin Case_LEDs' in printer}
input: {printer['output_pin Case_LEDs'].value}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_PIN PIN=Case_LEDs VALUE={1 if menu.input else 0}

[menu __main __control __caseleds_pwm]
type: input
enable: {'output_pin Case_LEDs' in printer}
name: Case LEDs: {'%3d' % (menu.input*100)}%
input: {printer['output_pin Case_LEDs'].value}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    SET_PIN PIN=Case_LEDs VALUE={menu.input}

[menu __main __moves]
type: list
name: My Moves

[menu __main __moves __center]
type: command
name: center
gcode: CENTER

[menu __main __moves __z75]
type: command
name: Z 75
gcode: Z_75

[menu __main __docking]
type: list
name: Docking

[menu __main __docking _attach]
type: command
name: Attach Probe
gcode: ATTACH_PROBE

[menu __main __docking _dock]
type: command
name: Dock Probe
gcode: DOCK_PROBE
