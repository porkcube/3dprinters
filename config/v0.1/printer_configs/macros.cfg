[gcode_macro PRINT_START]
description: PRINT_START macro, needs BED_TEMP and EXTRUDER_TEMP passed from slicer
gcode:
    ## KAMP
    SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 PROBE_DOCK_ENABLE=1 ATTACH_MACRO=Attach_Probe DETACH_MACRO=Dock_Probe FUZZ_ENABLE=1
    SETUP_VORON_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1 FLOW_RATE=10 X_DEFAULT=2 Y_DEFAULT=2
    SET_FAN_SPEED FAN=Filter_Fans SPEED=1
    SET_PIN PIN=Case_LEDs VALUE=1
    {% set BED_TEMP = params.BED_TEMP|default(110)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(150)|float %}
    # set and wait for bed to heat
    M190 S{BED_TEMP}
    # start warming up extruder to modest temp, no wait
    M104 S160
    # home + fresh mesh
    LED_RED
    G28
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    # BED_MESH_PROFILE LOAD=default
    # use absolute coordinates
    G90
  #   # move the nozzle near the bed
  #   G1 Z20 F3000
  #   # move the nozzle very close to the bed
  # ##M109 S{EXTRUDER_TEMP}
  # ##G1 Z0.15 F300
  #   # set and wait for nozzle to reach printing temp
  #   M104 S{EXTRUDER_TEMP}
  #   # purge/prime
  # ##G1 Z20 F3000
  #   G1 X2 Y15 Z10 F300
  #   M109 S{EXTRUDER_TEMP}
  #   G1 X2 Y15 Z2 F3000
  #   #M109 S{EXTRUDER_TEMP}
  #   G1 Z0.28 F240
  #   G92 E0
  #   G1 Y110 E10 F1500
  #   G1 X2.3 F3000
  #   G1 Y15 E15 F1500
    # G1 Z5
    M109 S{EXTRUDER_TEMP}
    VORON_PURGE
    # SET_VELOCITY_LIMIT ACCEL=12500
    LED_GREEN

# [gcode_macro PRINT_START]
# description: PRINT_START macro, needs BED_TEMP and EXTRUDER_TEMP passed from slicer
# gcode:
#     SET_FAN_SPEED FAN=Filter_Fans SPEED=1
#     SET_PIN PIN=Case_LEDs VALUE=1
#     {% set BED_TEMP = params.BED_TEMP|default(110)|float %}
#     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(250)|float %}
#     # set and wait for bed to heat
#     M190 S{BED_TEMP}
#     # start warming up extruder to modest temp, no wait
#     M104 S160
#     # home + fresh mesh
#     LED_RED
#     G28
#     BED_MESH_CALIBRATE
#     # BED_MESH_PROFILE LOAD=default
#     # use absolute coordinates
#     G90
#     # move the nozzle near the bed
#     G1 Z20 F3000
#     # move the nozzle very close to the bed
#   ##M109 S{EXTRUDER_TEMP}
#   ##G1 Z0.15 F300
#     # set and wait for nozzle to reach printing temp
#     M104 S{EXTRUDER_TEMP}
#     # purge/prime
#   ##G1 Z20 F3000
#     G1 X2 Y15 Z10 F300
#     M109 S{EXTRUDER_TEMP}
#     G1 X2 Y15 Z2 F3000
#     #M109 S{EXTRUDER_TEMP}
#     G1 Z0.28 F240
#     G92 E0
#     G1 Y110 E10 F1500
#     G1 X2.3 F3000
#     G1 Y15 E15 F1500
#     G1 Z5
#     SET_VELOCITY_LIMIT ACCEL=12500
#     LED_GREEN

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M117 Print Ending
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.0 F3600                 ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    LED_ORANGE
    SET_FAN_SPEED FAN=Filter_Fans SPEED=0
    SET_PIN PIN=Case_LEDs VALUE=0
    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G90                            ; absolute positioning
    G0 X60 Y{max_y} F3600          ; park nozzle at rear
    M117 Print Complete

[gcode_macro FIL_LOAD]
gcode:
   M117 Load Filament
   M83                            ; set extruder to relative
   G1 E30 F300                    ; load
   G1 E15 F150                    ; prime nozzle with filament
   M82                            ; set extruder to absolute
    
[gcode_macro FIL_UNL]
gcode:
   M117 Unload Filament
   M83                            ; set extruder to relative
   G1 E10 F300                    ; extrude a little to soften tip
   G1 E-40 F1800                  ; retract some, but not too much or it will jam
   M82                            ; set extruder to absolute

[gcode_macro BED_LEVEL]
gcode:
    G28                            ; home all axis
    BED_SCREWS_ADJUST              ; screw adjustment

[gcode_macro LED_BLUE]
gcode:
    SET_LED LED=displayStatus RED=0 GREEN=0 BLUE=0.2 SYNC=0

[gcode_macro LED_GREEN]
gcode:
    SET_LED LED=displayStatus RED=0 GREEN=0.2 BLUE=0 SYNC=0

[gcode_macro LED_ORANGE]
gcode:
    SET_LED LED=displayStatus RED=0.2 GREEN=0.1 BLUE=0 SYNC=0

[gcode_macro LED_RED]
gcode:
    SET_LED LED=displayStatus RED=0.2 GREEN=0 BLUE=0 SYNC=0

[gcode_macro CENTER]
gcode:
    G91
    G1 X60 Y60

[gcode_macro Z_75]
gcode:
    G91
    G1 Z75

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G90
		G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
